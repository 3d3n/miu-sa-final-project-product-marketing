2021-10-21 10:11:53,567 INFO org.springframework.boot.StartupInfoLogger [main] Starting AccountServiceApplicationTests using Java 16.0.2 on kevins-MacBook-Pro.local with PID 14635 (started by kevinlarry in /Users/kevinlarry/Downloads/miu-sa-final-project-product-marketing/account-service)
2021-10-21 10:11:53,571 DEBUG org.springframework.boot.StartupInfoLogger [main] Running with Spring Boot v2.5.5, Spring v5.3.10
2021-10-21 10:11:53,574 INFO org.springframework.boot.SpringApplication [main] No active profile set, falling back to default profiles: default
2021-10-21 10:11:56,829 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode!
2021-10-21 10:11:56,850 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data MongoDB repositories in DEFAULT mode.
2021-10-21 10:11:57,368 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 504 ms. Found 2 MongoDB repository interfaces.
2021-10-21 10:11:57,484 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Multiple Spring Data modules found, entering strict repository configuration mode!
2021-10-21 10:11:57,501 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2021-10-21 10:11:57,576 INFO org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport [main] Spring Data Redis - Could not safely identify store assignment for repository candidate interface miu.sa.accountservice.repository.AffiliateRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021-10-21 10:11:57,578 INFO org.springframework.data.repository.config.RepositoryConfigurationExtensionSupport [main] Spring Data Redis - Could not safely identify store assignment for repository candidate interface miu.sa.accountservice.repository.CustomerRepository. If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository.
2021-10-21 10:11:57,581 INFO org.springframework.data.repository.config.RepositoryConfigurationDelegate [main] Finished Spring Data repository scanning in 36 ms. Found 0 Redis repository interfaces.
2021-10-21 10:11:58,489 INFO org.springframework.cloud.context.scope.GenericScope [main] BeanFactory id=d67b0742-74e8-3300-b65d-0e34ba9edbfd
2021-10-21 10:12:02,019 WARN org.springframework.cloud.sleuth.autoconfig.zipkin2.ZipkinAutoConfiguration [main] Check result of the [RestTemplateSender{http://localhost:9411/api/v2/spans}] contains an error [CheckResult{ok=false, error=org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://localhost:9411/api/v2/spans": Read timed out; nested exception is java.net.SocketTimeoutException: Read timed out}]
2021-10-21 10:12:02,325 INFO com.mongodb.diagnostics.logging.SLF4JLogger [main] Cluster created with settings {hosts=[localhost:27017], mode=SINGLE, requiredClusterType=UNKNOWN, serverSelectionTimeout='2000 ms'}
2021-10-21 10:12:02,742 WARN org.springframework.data.convert.CustomConversions [main] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-10-21 10:12:03,309 WARN org.springframework.data.convert.CustomConversions [main] Registering converter from class java.time.LocalDateTime to class org.joda.time.LocalDateTime as reading converter although it doesn't convert from a store-supported type! You might want to check your annotation setup at the converter implementation.
2021-10-21 10:12:04,486 INFO com.mongodb.diagnostics.logging.SLF4JLogger [cluster-rtt-ClusterId{value='617183421ffda202660bae0f', description='null'}-localhost:27017] Opened connection [connectionId{localValue:2, serverValue:19}] to localhost:27017
2021-10-21 10:12:04,486 INFO com.mongodb.diagnostics.logging.SLF4JLogger [cluster-ClusterId{value='617183421ffda202660bae0f', description='null'}-localhost:27017] Opened connection [connectionId{localValue:1, serverValue:20}] to localhost:27017
2021-10-21 10:12:04,487 INFO com.mongodb.diagnostics.logging.SLF4JLogger [cluster-ClusterId{value='617183421ffda202660bae0f', description='null'}-localhost:27017] Monitor thread successfully connected to server with description ServerDescription{address=localhost:27017, type=STANDALONE, state=CONNECTED, ok=true, minWireVersion=0, maxWireVersion=13, maxDocumentSize=16777216, logicalSessionTimeoutMinutes=30, roundTripTimeNanos=1989975506}
2021-10-21 10:12:09,368 INFO org.springframework.cloud.netflix.eureka.config.DiscoveryClientOptionalArgsConfiguration [main] Eureka HTTP Client uses RestTemplate.
2021-10-21 10:12:10,494 WARN org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration$LoadBalancerCaffeineWarnLogger [main] Spring Cloud LoadBalancer is currently working with the default cache. You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.
2021-10-21 10:12:10,779 INFO org.springframework.cloud.netflix.eureka.InstanceInfoFactory [main] Setting initial instance status as: STARTING
2021-10-21 10:12:11,204 INFO com.netflix.discovery.DiscoveryClient [main] Initializing Eureka in region us-east-1
2021-10-21 10:12:11,255 INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver [main] Resolving eureka endpoints via configuration
2021-10-21 10:12:11,410 INFO com.netflix.discovery.DiscoveryClient [main] Disable delta property : false
2021-10-21 10:12:11,411 INFO com.netflix.discovery.DiscoveryClient [main] Single vip registry refresh property : null
2021-10-21 10:12:11,412 INFO com.netflix.discovery.DiscoveryClient [main] Force full registry fetch : false
2021-10-21 10:12:11,413 INFO com.netflix.discovery.DiscoveryClient [main] Application is null : false
2021-10-21 10:12:11,415 INFO com.netflix.discovery.DiscoveryClient [main] Registered Applications size is zero : true
2021-10-21 10:12:11,416 INFO com.netflix.discovery.DiscoveryClient [main] Application version is -1: true
2021-10-21 10:12:11,416 INFO com.netflix.discovery.DiscoveryClient [main] Getting all instance registry info from the eureka server
2021-10-21 10:12:17,740 INFO com.netflix.discovery.DiscoveryClient [main] The response status is 200
2021-10-21 10:12:17,758 INFO com.netflix.discovery.DiscoveryClient [main] Starting heartbeat executor: renew interval is: 30
2021-10-21 10:12:17,767 INFO com.netflix.discovery.InstanceInfoReplicator [main] InstanceInfoReplicator onDemand update allowed rate per min is 4
2021-10-21 10:12:17,826 INFO com.netflix.discovery.DiscoveryClient [main] Discovery Client initialized at timestamp 1634829137815 with initial instances count: 10
2021-10-21 10:12:18,028 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [main] Registering application ACCOUNT-SERVICE with eureka with status UP
2021-10-21 10:12:18,030 INFO com.netflix.discovery.DiscoveryClient$3 [main] Saw local status change event StatusChangeEvent [timestamp=1634829138030, current=UP, previous=STARTING]
2021-10-21 10:12:18,068 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_ACCOUNT-SERVICE/172.19.142.192:account-service:8282: registering service...
2021-10-21 10:12:18,227 INFO org.springframework.boot.StartupInfoLogger [main] Started AccountServiceApplicationTests in 30.891 seconds (JVM running for 34.111)
2021-10-21 10:12:18,541 INFO com.mongodb.diagnostics.logging.SLF4JLogger [main] Opened connection [connectionId{localValue:3, serverValue:21}] to localhost:27017
2021-10-21 10:12:18,836 INFO miu.sa.accountservice.config.DatabaseInitializer [main] Database preloading...
2021-10-21 10:12:18,956 INFO miu.sa.accountservice.service.CustomerService [main] save Request => Customer(id=null, firstName=Ada, lastName=Lovelace, email=ada.lovelace@miu.sa, password=ada, role=CUSTOMER, isActive=true, addresses=[Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=true), Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=false)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=1234, nameOnCard=ada lovelace, expDate=04/24), isDefault=true)])
2021-10-21 10:12:19,276 INFO miu.sa.accountservice.service.CustomerService [main] save Response => ResponseModel(message=Customer created, success=true, data=AccountDto(id=65969310-24d2-402e-acfd-a503f30debd6, email=ada.lovelace@miu.sa, firstName=Ada, lastName=Lovelace, role=CUSTOMER, isActive=true, addresses=[Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=true), Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=false)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=1234, nameOnCard=ada lovelace, expDate=04/24), isDefault=true)]))
2021-10-21 10:12:19,280 INFO miu.sa.accountservice.service.CustomerService [main] save Request => Customer(id=null, firstName=Alan, lastName=Turing, email=alan.turing@miu.sa, password=alan, role=CUSTOMER, isActive=true, addresses=[Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=true), Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=false)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=54678, nameOnCard=alan turing, expDate=07/22), isDefault=true)])
2021-10-21 10:12:19,289 INFO miu.sa.accountservice.service.CustomerService [main] save Response => ResponseModel(message=Customer created, success=true, data=AccountDto(id=55c2733a-07aa-46b3-a223-bdab31fb0340, email=alan.turing@miu.sa, firstName=Alan, lastName=Turing, role=CUSTOMER, isActive=true, addresses=[Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=true), Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=false)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=54678, nameOnCard=alan turing, expDate=07/22), isDefault=true)]))
2021-10-21 10:12:19,309 INFO miu.sa.accountservice.service.CustomerService [main] save Request => Customer(id=null, firstName=Dennis, lastName=Ritchie, email=dennis.ritchie@miu.sa, password=dennis, role=CUSTOMER, isActive=true, addresses=[Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=true), Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=false)], payments=[PaymentMethod(type=BANK, metaData=BankPayment(accountNo=9012345, routingNo=098765, accountName=dennis ritchie), isDefault=true)])
2021-10-21 10:12:19,328 INFO miu.sa.accountservice.service.CustomerService [main] save Response => ResponseModel(message=Customer created, success=true, data=AccountDto(id=fc1f3958-946b-4ae8-8ac0-6b91bfdceecc, email=dennis.ritchie@miu.sa, firstName=Dennis, lastName=Ritchie, role=CUSTOMER, isActive=true, addresses=[Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=true), Address(street=1000 N 4th st, zip=52557, city=Fairfield, state=IA, isDefault=false)], payments=[PaymentMethod(type=BANK, metaData=BankPayment(accountNo=9012345, routingNo=098765, accountName=dennis ritchie), isDefault=true)]))
2021-10-21 10:12:19,358 INFO miu.sa.accountservice.service.AffiliateService [main] save Request => Affiliate(id=null, firstName=Patricia, lastName=Lebsack, email=patricia.lebsack@miu.sa, password=patricia, role=AFFILIATE, isActive=true, addresses=[Address(street=Kulas Light, zip=92998-3874, city=Gwenborough, state=IA, isDefault=true), Address(street=Victor Plains, zip=90566-7771, city=Wisokyburgh, state=IA, isDefault=false)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=1234, nameOnCard=Patricia Lebsack, expDate=04/24), isDefault=true)])
2021-10-21 10:12:19,563 INFO miu.sa.accountservice.service.AffiliateService [main] save Response => ResponseModel(message=Affiliate created, success=true, data=AccountDto(id=9296d832-2896-4e9a-acc9-66b46d5b38df, email=patricia.lebsack@miu.sa, firstName=Patricia, lastName=Lebsack, role=AFFILIATE, isActive=true, addresses=[Address(street=Kulas Light, zip=92998-3874, city=Gwenborough, state=IA, isDefault=true), Address(street=Victor Plains, zip=90566-7771, city=Wisokyburgh, state=IA, isDefault=false)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=1234, nameOnCard=Patricia Lebsack, expDate=04/24), isDefault=true)]))
2021-10-21 10:12:19,564 INFO miu.sa.accountservice.service.AffiliateService [main] save Request => Affiliate(id=null, firstName=Clementine, lastName=Bauch, email=clementine.bauch@miu.sa, password=clementine, role=AFFILIATE, isActive=true, addresses=[Address(street=Douglas Extension, zip=59590-4157, city=McKenziehaven, state=IA, isDefault=true)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=54678, nameOnCard=Clementine Bauch, expDate=07/22), isDefault=true)])
2021-10-21 10:12:19,571 INFO miu.sa.accountservice.service.AffiliateService [main] save Response => ResponseModel(message=Affiliate created, success=true, data=AccountDto(id=7e3c03c7-2db8-4592-a174-0611ffd09c10, email=clementine.bauch@miu.sa, firstName=Clementine, lastName=Bauch, role=AFFILIATE, isActive=true, addresses=[Address(street=Douglas Extension, zip=59590-4157, city=McKenziehaven, state=IA, isDefault=true)], payments=[PaymentMethod(type=CC, metaData=CreditCardPayment(cardNumber=54678, nameOnCard=Clementine Bauch, expDate=07/22), isDefault=true)]))
2021-10-21 10:12:19,572 INFO miu.sa.accountservice.service.AffiliateService [main] save Request => Affiliate(id=null, firstName=Ervin, lastName=Howell, email=ervin.howell@miu.sa, password=ervin, role=AFFILIATE, isActive=true, addresses=[Address(street=Hoeger Mall, zip=53919-4257, city=South Elvis, state=IA, isDefault=true)], payments=[PaymentMethod(type=BANK, metaData=BankPayment(accountNo=9012345, routingNo=098765, accountName=Ervin Howell), isDefault=true)])
2021-10-21 10:12:19,582 INFO miu.sa.accountservice.service.AffiliateService [main] save Response => ResponseModel(message=Affiliate created, success=true, data=AccountDto(id=94e8ffb3-e003-4c50-b37e-9a3fc85b71ec, email=ervin.howell@miu.sa, firstName=Ervin, lastName=Howell, role=AFFILIATE, isActive=true, addresses=[Address(street=Hoeger Mall, zip=53919-4257, city=South Elvis, state=IA, isDefault=true)], payments=[PaymentMethod(type=BANK, metaData=BankPayment(accountNo=9012345, routingNo=098765, accountName=Ervin Howell), isDefault=true)]))
2021-10-21 10:12:19,582 INFO miu.sa.accountservice.config.DatabaseInitializer [main] Database preloaded::::
2021-10-21 10:12:20,282 WARN zipkin2.reporter.AsyncReporter$BoundedAsyncReporter [AsyncReporter{RestTemplateSender{http://localhost:9411/api/v2/spans}}] Spans were dropped due to exceptions. All subsequent errors will be logged at FINE level.
2021-10-21 10:12:20,287 WARN zipkin2.reporter.AsyncReporter$BoundedAsyncReporter [AsyncReporter{RestTemplateSender{http://localhost:9411/api/v2/spans}}] Dropped 8 spans due to ResourceAccessException(I/O error on POST request for "http://localhost:9411/api/v2/spans": Read timed out; nested exception is java.net.SocketTimeoutException: Read timed out)
org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://localhost:9411/api/v2/spans": Read timed out; nested exception is java.net.SocketTimeoutException: Read timed out
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:785)
	at org.springframework.cloud.sleuth.zipkin2.ZipkinRestTemplateWrapper.doExecute(ZipkinRestTemplateWrapper.java:69)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:660)
	at org.springframework.cloud.sleuth.zipkin2.RestTemplateSender.post(RestTemplateSender.java:151)
	at org.springframework.cloud.sleuth.zipkin2.RestTemplateSender$HttpPostCall.doExecute(RestTemplateSender.java:169)
	at org.springframework.cloud.sleuth.zipkin2.RestTemplateSender$HttpPostCall.doExecute(RestTemplateSender.java:159)
	at zipkin2.Call$Base.execute(Call.java:391)
	at zipkin2.reporter.AsyncReporter$BoundedAsyncReporter.flush(AsyncReporter.java:299)
	at zipkin2.reporter.AsyncReporter$Flusher.run(AsyncReporter.java:378)
	at java.base/java.lang.Thread.run(Thread.java:831)
Caused by: java.net.SocketTimeoutException: Read timed out
	at java.base/sun.nio.ch.NioSocketImpl.timedRead(NioSocketImpl.java:283)
	at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:309)
	at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:350)
	at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:803)
	at java.base/java.net.Socket$SocketInputStream.read(Socket.java:976)
	at java.base/java.io.BufferedInputStream.fill(BufferedInputStream.java:244)
	at java.base/java.io.BufferedInputStream.read1(BufferedInputStream.java:284)
	at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:343)
	at java.base/sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:788)
	at java.base/sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:723)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1676)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1577)
	at java.base/java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:527)
	at org.springframework.http.client.SimpleClientHttpResponse.getRawStatusCode(SimpleClientHttpResponse.java:55)
	at org.springframework.web.client.DefaultResponseErrorHandler.hasError(DefaultResponseErrorHandler.java:64)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:807)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:777)
	... 9 common frames omitted
2021-10-21 10:12:21,980 INFO org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry [SpringApplicationShutdownHook] Unregistering application ACCOUNT-SERVICE with eureka with status DOWN
2021-10-21 10:12:21,984 INFO com.netflix.discovery.DiscoveryClient$3 [SpringApplicationShutdownHook] Saw local status change event StatusChangeEvent [timestamp=1634829141983, current=DOWN, previous=UP]
2021-10-21 10:12:22,242 INFO com.mongodb.diagnostics.logging.SLF4JLogger [SpringApplicationShutdownHook] Closed connection [connectionId{localValue:3, serverValue:21}] to localhost:27017 because the pool has been closed.
2021-10-21 10:12:23,255 INFO com.netflix.discovery.DiscoveryClient [SpringApplicationShutdownHook] Shutting down DiscoveryClient ...
2021-10-21 10:12:26,283 INFO com.netflix.discovery.DiscoveryClient [SpringApplicationShutdownHook] Unregistering ...
2021-10-21 10:12:31,407 INFO com.netflix.discovery.DiscoveryClient [DiscoveryClient-InstanceInfoReplicator-0] DiscoveryClient_ACCOUNT-SERVICE/172.19.142.192:account-service:8282 - registration status: 204
2021-10-21 10:12:34,940 INFO com.netflix.discovery.DiscoveryClient [SpringApplicationShutdownHook] DiscoveryClient_ACCOUNT-SERVICE/172.19.142.192:account-service:8282 - deregister  status: 200
2021-10-21 10:12:35,322 INFO com.netflix.discovery.DiscoveryClient [SpringApplicationShutdownHook] Completed shut down of DiscoveryClient
